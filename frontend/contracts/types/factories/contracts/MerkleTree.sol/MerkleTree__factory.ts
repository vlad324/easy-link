/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MerkleTree,
  MerkleTreeInterface,
} from "../../../contracts/MerkleTree.sol/MerkleTree";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_levels",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_hasher",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FIELD_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasher",
    outputs: [
      {
        internalType: "contract IPoseidonHasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "index",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
    ],
    name: "isValidRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    name: "levelHashes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxSize",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405260008060016101000a81548163ffffffff021916908363ffffffff1602179055503480156200003257600080fd5b50604051620011da380380620011da8339818101604052810190620000589190620004a8565b60008260ff1611620000a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000989062000550565b60405180910390fd5b600a8260ff161115620000eb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000e290620005e8565b60405180910390fd5b816000806101000a81548160ff021916908360ff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060008054906101000a900460ff1660026200015591906200079d565b63ffffffff1660a08163ffffffff168152505060005b8260ff168160ff161015620001c1576200018e8160ff16620001ca60201b60201c565b600160008360ff1660ff168152602001908152602001600020819055508080620001b890620007d2565b9150506200016b565b50505062000872565b6000808203620001fd577f1b47eebd31a8cdbc109d42a60ae2f77d3916fdf63e1d6d3c9614c84c665876169050620003fb565b600182036200022f577f0998c45a8df60690d2142a1e29541e4c5203c5f0039e1f736a48a4ea3939996c9050620003fb565b6002820362000261577f1b8525aeb12de720fbc32b7a5b505efc1bd4396e223644aed9d48c4ecc5a64519050620003fb565b6003820362000293577f1937e198ced295751ebf9996ad4429473bb657521a76f372ab62eab9dd09f7299050620003fb565b60048203620002c5577f043fae75b0a1c6cfe6bbd4a260fc421f26cd352974d31d3627896a677f3931a39050620003fb565b60058203620002f6577e7c68bad132df37627c5fa5e1c06601d5af97124b0bd19f6e29593e1814ae519050620003fb565b6006820362000328577f2aca3ddb1f0c22cd53383b85231c1a10634f160ce945c639b2b799ed8b37f5ae9050620003fb565b600782036200035a577f037ca32d66c15af3f7cb3cbc7d5b0fad9104582d24416fdd85c50586d3079a0e9050620003fb565b600882036200038c577f1c9e22b869e38db54e772baa9a4765b9ccb1ea458ea4a50c3ce9ce5152a955819050620003fb565b60098203620003be577f283f3963c14e4a1873557637cf74773b5de1d3dcafa8c2c82f18720fabd5e0f99050620003fb565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003f29062000850565b60405180910390fd5b919050565b600080fd5b600060ff82169050919050565b6200041d8162000405565b81146200042957600080fd5b50565b6000815190506200043d8162000412565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004708262000443565b9050919050565b620004828162000463565b81146200048e57600080fd5b50565b600081519050620004a28162000477565b92915050565b60008060408385031215620004c257620004c162000400565b5b6000620004d2858286016200042c565b9250506020620004e58582860162000491565b9150509250929050565b600082825260208201905092915050565b7f5f6c6576656c732073686f756c642062652067726561746572207468616e2030600082015250565b600062000538602083620004ef565b9150620005458262000500565b602082019050919050565b600060208201905081810360008301526200056b8162000529565b9050919050565b7f5f6c6576656c732073686f756c64206e6f74206265206772656174657220746860008201527f616e203130000000000000000000000000000000000000000000000000000000602082015250565b6000620005d0602583620004ef565b9150620005dd8262000572565b604082019050919050565b600060208201905081810360008301526200060381620005c1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620006985780860481111562000670576200066f6200060a565b5b6001851615620006805780820291505b8081029050620006908562000639565b945062000650565b94509492505050565b600082620006b3576001905062000786565b81620006c3576000905062000786565b8160018114620006dc5760028114620006e7576200071d565b600191505062000786565b60ff841115620006fc57620006fb6200060a565b5b8360020a9150848211156200071657620007156200060a565b5b5062000786565b5060208310610133831016604e8410600b8410161715620007575782820a9050838111156200075157620007506200060a565b5b62000786565b62000766848484600162000646565b9250905081840481111562000780576200077f6200060a565b5b81810290505b9392505050565b600063ffffffff82169050919050565b6000620007aa826200078d565b9150620007b78362000405565b9250620007ca63ffffffff8484620006a1565b905092915050565b6000620007df8262000405565b915060ff8203620007f557620007f46200060a565b5b600182019050919050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b600062000838601383620004ef565b9150620008458262000800565b602082019050919050565b600060208201905081810360008301526200086b8162000829565b9050919050565b60805160a0516109426200089860003960006102190152600061058901526109426000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c2b40ae411610066578063c2b40ae41461014b578063cd87a3b41461017b578063ce7597c914610199578063e8295588146101c9578063ed33639f146101f95761009e565b80632565b159146100a35780632986c0e5146100c15780632cdabbce146100df578063414a37ba1461010f5780634ecf518b1461012d575b600080fd5b6100ab610217565b6040516100b891906105ca565b60405180910390f35b6100c961023b565b6040516100d691906105ca565b60405180910390f35b6100f960048036038101906100f49190610620565b610251565b6040516101069190610668565b60405180910390f35b6101176102fd565b6040516101249190610692565b60405180910390f35b610135610321565b60405161014291906106c9565b60405180910390f35b61016560048036038101906101609190610620565b610332565b6040516101729190610692565b60405180910390f35b61018361034a565b60405161019091906106c9565b60405180910390f35b6101b360048036038101906101ae9190610710565b61034f565b6040516101c09190610692565b60405180910390f35b6101e360048036038101906101de9190610620565b610367565b6040516101f09190610692565b60405180910390f35b610201610587565b60405161020e91906107bc565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600060019054906101000a900463ffffffff1681565b600080820361026357600090506102f8565b6000601e60ff16600060019054906101000a900463ffffffff166102879190610806565b905060008190505b83600260008363ffffffff16815260200190815260200160002054036102ba576001925050506102f8565b60008163ffffffff16036102d057601e60ff1690505b80806102db90610866565b9150508163ffffffff168163ffffffff160361028f576000925050505b919050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b60008054906101000a900460ff1681565b60026020528060005260406000206000915090505481565b601e81565b60016020528060005260406000206000915090505481565b6000808203610398577f1b47eebd31a8cdbc109d42a60ae2f77d3916fdf63e1d6d3c9614c84c665876169050610582565b600182036103c8577f0998c45a8df60690d2142a1e29541e4c5203c5f0039e1f736a48a4ea3939996c9050610582565b600282036103f8577f1b8525aeb12de720fbc32b7a5b505efc1bd4396e223644aed9d48c4ecc5a64519050610582565b60038203610428577f1937e198ced295751ebf9996ad4429473bb657521a76f372ab62eab9dd09f7299050610582565b60048203610458577f043fae75b0a1c6cfe6bbd4a260fc421f26cd352974d31d3627896a677f3931a39050610582565b60058203610487577e7c68bad132df37627c5fa5e1c06601d5af97124b0bd19f6e29593e1814ae519050610582565b600682036104b7577f2aca3ddb1f0c22cd53383b85231c1a10634f160ce945c639b2b799ed8b37f5ae9050610582565b600782036104e7577f037ca32d66c15af3f7cb3cbc7d5b0fad9104582d24416fdd85c50586d3079a0e9050610582565b60088203610517577f1c9e22b869e38db54e772baa9a4765b9ccb1ea458ea4a50c3ce9ce5152a955819050610582565b60098203610547577f283f3963c14e4a1873557637cf74773b5de1d3dcafa8c2c82f18720fabd5e0f99050610582565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610579906108ec565b60405180910390fd5b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600063ffffffff82169050919050565b6105c4816105ab565b82525050565b60006020820190506105df60008301846105bb565b92915050565b600080fd5b6000819050919050565b6105fd816105ea565b811461060857600080fd5b50565b60008135905061061a816105f4565b92915050565b600060208284031215610636576106356105e5565b5b60006106448482850161060b565b91505092915050565b60008115159050919050565b6106628161064d565b82525050565b600060208201905061067d6000830184610659565b92915050565b61068c816105ea565b82525050565b60006020820190506106a76000830184610683565b92915050565b600060ff82169050919050565b6106c3816106ad565b82525050565b60006020820190506106de60008301846106ba565b92915050565b6106ed816106ad565b81146106f857600080fd5b50565b60008135905061070a816106e4565b92915050565b600060208284031215610726576107256105e5565b5b6000610734848285016106fb565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061078261077d6107788461073d565b61075d565b61073d565b9050919050565b600061079482610767565b9050919050565b60006107a682610789565b9050919050565b6107b68161079b565b82525050565b60006020820190506107d160008301846107ad565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610811826105ab565b915061081c836105ab565b92508261082c5761082b6107d7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610871826105ab565b91506000820361088457610883610837565b5b600182039050919050565b600082825260208201905092915050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b60006108d660138361088f565b91506108e1826108a0565b602082019050919050565b60006020820190508181036000830152610905816108c9565b905091905056fea2646970667358221220fef141289f83bb1fa5bf4c657392d791328c2460eb5c990b2aebaf7d4aa5874f64736f6c634300080d0033";

type MerkleTreeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleTreeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleTree__factory extends ContractFactory {
  constructor(...args: MerkleTreeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _levels: BigNumberish,
    _hasher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleTree> {
    return super.deploy(
      _levels,
      _hasher,
      overrides || {}
    ) as Promise<MerkleTree>;
  }
  override getDeployTransaction(
    _levels: BigNumberish,
    _hasher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_levels, _hasher, overrides || {});
  }
  override attach(address: string): MerkleTree {
    return super.attach(address) as MerkleTree;
  }
  override connect(signer: Signer): MerkleTree__factory {
    return super.connect(signer) as MerkleTree__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeInterface {
    return new utils.Interface(_abi) as MerkleTreeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTree {
    return new Contract(address, _abi, signerOrProvider) as MerkleTree;
  }
}
